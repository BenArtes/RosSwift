// Generated by msgbuilder 2020-05-10 05:39:47 +0000

import StdMsgs

extension control_msgs {
	/// This message presents current controller state of one joint.
	/// Header timestamp should be update time of controller state
	/// The set point, that is, desired state.
	/// Current value of the process (ie: latest sensor measurement on the controlled value).
	/// First time-derivative of the process value.
	/// The error of the controlled value, essentially process_value - set_point (for a regular PID implementation).
	/// Time between two consecutive updates/execution of the control law.
	/// Current output of the controller.
	/// Current PID parameters of the controller.
	public struct JointControllerState: MessageWithHeader {
		public static let md5sum: String = "987ad85e4756f3aef7f1e5e7fe0595d1"
		public static let datatype = "control_msgs/JointControllerState"
		public static let definition = """
			# This message presents current controller state of one joint.
			# Header timestamp should be update time of controller state
			Header header
			# The set point, that is, desired state.
			float64 set_point
			# Current value of the process (ie: latest sensor measurement on the controlled value).
			float64 process_value
			# First time-derivative of the process value.
			float64 process_value_dot
			# The error of the controlled value, essentially process_value - set_point (for a regular PID implementation).
			float64 error
			# Time between two consecutive updates/execution of the control law.
			float64 time_step
			# Current output of the controller.
			float64 command
			# Current PID parameters of the controller.
			float64 p
			float64 i
			float64 d
			float64 i_clamp
			bool antiwindup
			"""

	
		public var header: std_msgs.Header
		public var set_point: Float64
		public var process_value: Float64
		public var process_value_dot: Float64
		public var error: Float64
		public var time_step: Float64
		public var command: Float64
		public var p: Float64
		public var i: Float64
		public var d: Float64
		public var i_clamp: Float64
		public var antiwindup: Bool

		public init(header: std_msgs.Header, set_point: Float64, process_value: Float64, process_value_dot: Float64, error: Float64, time_step: Float64, command: Float64, p: Float64, i: Float64, d: Float64, i_clamp: Float64, antiwindup: Bool) {
			self.header = header
			self.set_point = set_point
			self.process_value = process_value
			self.process_value_dot = process_value_dot
			self.error = error
			self.time_step = time_step
			self.command = command
			self.p = p
			self.i = i
			self.d = d
			self.i_clamp = i_clamp
			self.antiwindup = antiwindup
		}

		public init() {
			header = std_msgs.Header()
			set_point = Float64()
			process_value = Float64()
			process_value_dot = Float64()
			error = Float64()
			time_step = Float64()
			command = Float64()
			p = Float64()
			i = Float64()
			d = Float64()
			i_clamp = Float64()
			antiwindup = Bool()
		}
	}
}