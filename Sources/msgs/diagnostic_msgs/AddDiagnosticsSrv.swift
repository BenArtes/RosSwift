// Generated by msgbuilder 2020-05-14 06:44:12 +0000

import StdMsgs

extension diagnostic_msgs {
	public enum AddDiagnostics: ServiceProt {
		public static let md5sum: String = "e6ac9bbde83d0d3186523c3687aecaee"
		public static let datatype = "diagnostic_msgs/AddDiagnostics"

		/// This service is used as part of the process for loading analyzers at runtime,
		/// and should be used by a loader script or program, not as a standalone service.
		/// Information about dynamic addition of analyzers can be found at
		/// http://wiki.ros.org/diagnostics/Tutorials/Adding%20Analyzers%20at%20Runtime
		/// The load_namespace parameter defines the namespace where parameters for the
		/// initialization of analyzers in the diagnostic aggregator have been loaded. The
		/// value should be a global name (i.e. /my/name/space), not a relative
		/// (my/name/space) or private (~my/name/space) name. Analyzers will not be added
		/// if a non-global name is used. The call will also fail if the namespace
		/// contains parameters that follow a namespace structure that does not conform to
		/// that expected by the analyzer definitions. See
		/// http://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregators
		/// and http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzer
		/// for examples of the structure of yaml files which are expected to have been
		/// loaded into the namespace.
		public struct Request: ServiceRequestMessage {
			public static let md5sum: String = "c26cf6e164288fbc6050d74f838bcdf0"
			public static let datatype = "diagnostic_msgs/AddDiagnosticsRequest"
			public typealias ServiceType = AddDiagnostics
			public static let definition = """
				# This service is used as part of the process for loading analyzers at runtime,
				# and should be used by a loader script or program, not as a standalone service.
				# Information about dynamic addition of analyzers can be found at
				# http://wiki.ros.org/diagnostics/Tutorials/Adding%20Analyzers%20at%20Runtime
				# The load_namespace parameter defines the namespace where parameters for the
				# initialization of analyzers in the diagnostic aggregator have been loaded. The
				# value should be a global name (i.e. /my/name/space), not a relative
				# (my/name/space) or private (~my/name/space) name. Analyzers will not be added
				# if a non-global name is used. The call will also fail if the namespace
				# contains parameters that follow a namespace structure that does not conform to
				# that expected by the analyzer definitions. See
				# http://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregators
				# and http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzer
				# for examples of the structure of yaml files which are expected to have been
				# loaded into the namespace.
				string load_namespace
				"""
	
		
			public var load_namespace: String
	
			public init(load_namespace: String) {
				self.load_namespace = load_namespace
			}
	
			public init() {
				load_namespace = String()
			}
		}

		/// True if diagnostic aggregator was updated with new diagnostics, False
		/// otherwise. A false return value means that either there is a bond in the
		/// aggregator which already used the requested namespace, or the initialization
		/// of analyzers failed.
		/// Message with additional information about the success or failure
		public struct Response: ServiceResponseMessage {
			public static let md5sum: String = "937c9679a518e3a18d831e57125ea522"
			public static let datatype = "diagnostic_msgs/AddDiagnosticsResponse"
			public typealias ServiceType = AddDiagnostics
			public static let definition = """
				# True if diagnostic aggregator was updated with new diagnostics, False
				# otherwise. A false return value means that either there is a bond in the
				# aggregator which already used the requested namespace, or the initialization
				# of analyzers failed.
				bool success
				# Message with additional information about the success or failure
				string message
				"""
	
		
			public var success: Bool
			public var message: String
	
			public init(success: Bool, message: String) {
				self.success = success
				self.message = message
			}
	
			public init() {
				success = Bool()
				message = String()
			}
		}

	}
}