// Generated by msgbuilder 2020-05-14 06:57:32 +0000

import StdMsgs

extension geographic_msgs {
	public enum GetGeoPath: ServiceProt {
		public static let md5sum: String = "ee0dbd181711a70f823cc5d415fa609b"
		public static let datatype = "geographic_msgs/GetGeoPath"

		/// Searches for given start and goal the nearest route segments
		/// and determine the path through the RouteNetwork
		public struct Request: ServiceRequestMessage {
			public static let md5sum: String = "cad6de11e4ae4ca568785186e1f99f89"
			public static let datatype = "geographic_msgs/GetGeoPathRequest"
			public typealias ServiceType = GetGeoPath
			public static let definition = """
				# Searches for given start and goal the nearest route segments
				# and determine the path through the RouteNetwork
				geographic_msgs/GeoPoint start        # starting point
				geographic_msgs/GeoPoint goal         # goal point
				"""
	
		
			public var start: GeoPoint
			public var goal: GeoPoint
	
			public init(start: GeoPoint, goal: GeoPoint) {
				self.start = start
				self.goal = goal
			}
	
			public init() {
				start = GeoPoint()
				goal = GeoPoint()
			}
		}

	
		public struct Response: ServiceResponseMessage {
			public static let md5sum: String = "0562f4b72e4d5b8e5fa142bd7363638c"
			public static let datatype = "geographic_msgs/GetGeoPathResponse"
			public typealias ServiceType = GetGeoPath
			public static let definition = """
				bool success                          # true if the call succeeded
				string status                         # more details
				geographic_msgs/GeoPath plan          # path to follow
				uuid_msgs/UniqueID network            # the uuid of the RouteNetwork
				uuid_msgs/UniqueID start_seg          # the uuid of the starting RouteSegment
				uuid_msgs/UniqueID goal_seg           # the uuid of the ending RouteSegment
				float64 distance                      # the length of the plan
				"""
	
		
			public var success: Bool
			public var status: String
			public var plan: GeoPath
			public var network: uuid_msgs.UniqueID
			public var start_seg: uuid_msgs.UniqueID
			public var goal_seg: uuid_msgs.UniqueID
			public var distance: Float64
	
			public init(success: Bool, status: String, plan: GeoPath, network: uuid_msgs.UniqueID, start_seg: uuid_msgs.UniqueID, goal_seg: uuid_msgs.UniqueID, distance: Float64) {
				self.success = success
				self.status = status
				self.plan = plan
				self.network = network
				self.start_seg = start_seg
				self.goal_seg = goal_seg
				self.distance = distance
			}
	
			public init() {
				success = Bool()
				status = String()
				plan = GeoPath()
				network = uuid_msgs.UniqueID()
				start_seg = uuid_msgs.UniqueID()
				goal_seg = uuid_msgs.UniqueID()
				distance = Float64()
			}
		}

	}
}