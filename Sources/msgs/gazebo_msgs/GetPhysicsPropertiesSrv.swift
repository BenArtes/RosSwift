// Generated by msgbuilder 2024-02-23 05:14:48 +0000

import StdMsgs

extension gazebo_msgs {
	public enum GetPhysicsProperties: ServiceProt {
		public static let md5sum: String = "575a5e74786981b7df2e3afc567693a6"
		public static let datatype = "gazebo_msgs/GetPhysicsProperties"

	
		public struct Request: ServiceRequestMessage {
			public static let md5sum: String = "d41d8cd98f00b204e9800998ecf8427e"
			public static let datatype = "gazebo_msgs/GetPhysicsPropertiesRequest"
			public typealias ServiceType = GetPhysicsProperties
			public static let definition = ""
	
			public init() {
		
			}
		}

		/// sets pose and twist of a link.  All children link poses/twists of the URDF tree will be updated accordingly
		public struct Response: ServiceResponseMessage {
			public static let md5sum: String = "575a5e74786981b7df2e3afc567693a6"
			public static let datatype = "gazebo_msgs/GetPhysicsPropertiesResponse"
			public typealias ServiceType = GetPhysicsProperties
			public static let definition = """
				# sets pose and twist of a link.  All children link poses/twists of the URDF tree will be updated accordingly
				float64 time_step                  # dt in seconds
				bool pause                         # true if physics engine is paused
				float64 max_update_rate            # throttle maximum physics update rate
				geometry_msgs/Vector3 gravity      # gravity vector (e.g. earth ~[0,0,-9.81])
				gazebo_msgs/ODEPhysics ode_config  # contains physics configurations pertaining to ODE
				bool success                       # return true if set wrench successful
				string status_message              # comments if available
				"""
	
			public var time_step: Float64
			public var pause: Bool
			public var max_update_rate: Float64
			public var gravity: geometry_msgs.Vector3
			public var ode_config: ODEPhysics
			public var success: Bool
			public var status_message: String
	
			public init(time_step: Float64, pause: Bool, max_update_rate: Float64, gravity: geometry_msgs.Vector3, ode_config: ODEPhysics, success: Bool, status_message: String) {
				self.time_step = time_step
				self.pause = pause
				self.max_update_rate = max_update_rate
				self.gravity = gravity
				self.ode_config = ode_config
				self.success = success
				self.status_message = status_message
			}
	
			public init() {
				time_step = Float64()
				pause = Bool()
				max_update_rate = Float64()
				gravity = geometry_msgs.Vector3()
				ode_config = ODEPhysics()
				success = Bool()
				status_message = String()
			}
		}

	}
}