// Generated by msgbuilder 2020-05-15 06:20:49 +0000

import StdMsgs

extension gazebo_msgs {
	public enum GetModelState: ServiceProt {
		public static let md5sum: String = "4c515e936d3319c9610c559c60bfc3d4"
		public static let datatype = "gazebo_msgs/GetModelState"

	
		public struct Request: ServiceRequestMessage {
			public static let md5sum: String = "19d412713cefe4a67437e17a951e759e"
			public static let datatype = "gazebo_msgs/GetModelStateRequest"
			public typealias ServiceType = GetModelState
			public static let definition = """
				string model_name                    # name of Gazebo Model
				string relative_entity_name          # return pose and twist relative to this entity
				                                     # an entity can be a model, body, or geom
				                                     # be sure to use gazebo scoped naming notation (e.g. [model_name::body_name])
				                                     # leave empty or "world" will use inertial world frame
				"""
	
			public var model_name: String
			public var relative_entity_name: String
	
			public init(model_name: String, relative_entity_name: String) {
				self.model_name = model_name
				self.relative_entity_name = relative_entity_name
			}
	
			public init() {
				model_name = String()
				relative_entity_name = String()
			}
		}

	
		public struct Response: ServiceResponseMessage, MessageWithHeader {
			public static let md5sum: String = "ccd51739bb00f0141629e87b792e92b9"
			public static let datatype = "gazebo_msgs/GetModelStateResponse"
			public typealias ServiceType = GetModelState
			public static let definition = """
				Header header                        # Standard metadata for higher-level stamped data types.
				                                     # * header.seq holds the number of requests since the plugin started
				                                     # * header.stamp timestamp related to the pose
				                                     # * header.frame_id not used but currently filled with the relative_entity_name
				geometry_msgs/Pose pose              # pose of model in relative entity frame
				geometry_msgs/Twist twist            # twist of model in relative entity frame
				bool success                         # return true if get successful
				string status_message                # comments if available
				"""
	
			public var header: std_msgs.Header
			public var pose: geometry_msgs.Pose
			public var twist: geometry_msgs.Twist
			public var success: Bool
			public var status_message: String
	
			public init(header: std_msgs.Header, pose: geometry_msgs.Pose, twist: geometry_msgs.Twist, success: Bool, status_message: String) {
				self.header = header
				self.pose = pose
				self.twist = twist
				self.success = success
				self.status_message = status_message
			}
	
			public init() {
				header = std_msgs.Header()
				pose = geometry_msgs.Pose()
				twist = geometry_msgs.Twist()
				success = Bool()
				status_message = String()
			}
		}

	}
}