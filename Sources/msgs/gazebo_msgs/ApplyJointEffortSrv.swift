// Generated by msgbuilder 2024-02-23 05:14:48 +0000

import RosTime
import StdMsgs

extension gazebo_msgs {
	public enum ApplyJointEffort: ServiceProt {
		public static let md5sum: String = "c0039811b8cc919490b3cff748cdf46b"
		public static let datatype = "gazebo_msgs/ApplyJointEffort"

		/// set urdf joint effort
		public struct Request: ServiceRequestMessage {
			public static let md5sum: String = "2c3396ab9af67a509ecd2167a8fe41a2"
			public static let datatype = "gazebo_msgs/ApplyJointEffortRequest"
			public typealias ServiceType = ApplyJointEffort
			public static let definition = """
				# set urdf joint effort
				string joint_name           # joint to apply wrench (linear force and torque)
				float64 effort              # effort to apply
				time start_time             # optional wrench application start time (seconds)
				                            # if start_time < current time, start as soon as possible
				duration duration           # optional duration of wrench application time (seconds)
				                            # if duration < 0, apply wrench continuously without end
				                            # if duration = 0, do nothing
				                            # if duration < step size, assume step size and
				                            #               display warning in status_message
				"""
	
			public var joint_name: String
			public var effort: Float64
			public var start_time: Time
			public var duration: Duration
	
			public init(joint_name: String, effort: Float64, start_time: Time, duration: Duration) {
				self.joint_name = joint_name
				self.effort = effort
				self.start_time = start_time
				self.duration = duration
			}
	
			public init() {
				joint_name = String()
				effort = Float64()
				start_time = Time()
				duration = RosDuration()
			}
		}

	
		public struct Response: ServiceResponseMessage {
			public static let md5sum: String = "2ec6f3eff0161f4257b808b12bc830c2"
			public static let datatype = "gazebo_msgs/ApplyJointEffortResponse"
			public typealias ServiceType = ApplyJointEffort
			public static let definition = """
				bool success                # return true if effort application is successful
				string status_message       # comments if available
				"""
	
			public var success: Bool
			public var status_message: String
	
			public init(success: Bool, status_message: String) {
				self.success = success
				self.status_message = status_message
			}
	
			public init() {
				success = Bool()
				status_message = String()
			}
		}

	}
}
