//
//  File.swift
//  
//
//  Created by Thomas Gustafsson on 2020-05-09.
//

import Foundation

struct SrvSpec: BaseMsg {
    let request: MsgSpec
    let response: MsgSpec
    let text: String
    let full_name: String
    let package: String
    let short_name: String
    let generate: Bool
    var variables: [Variable] {
        request.variables + response.variables
    }

    let constants: [Constant] = []

    func compute_md5(msg_context: MsgContext) -> String? {
        if let str1 = request.compute_md5_text(msg_context: msg_context), let str2 = response.compute_md5_text(msg_context: msg_context) {
            return (str1+str2).hashed()
        }
        return nil
    }


    func dumpSwiftCode(context: MsgContext, destination: String) {
        if let code = generateSwiftCode(context: context) {
            let file = "\(destination)/\(package)/\(short_name)Srv.swift"
            if let oldContent = try? String(contentsOfFile: file, encoding: .utf8) {
                // The date in the first row will always change
                if oldContent.components(separatedBy: .newlines).dropFirst() == code.components(separatedBy: .newlines).dropFirst() {
                    return
                }
            }
            do {
                try code.write(toFile: file, atomically: false, encoding: .utf8)
                print("generated \(full_name)")
            } catch {
                print("failed to write \(file)\nerror: \(error.localizedDescription)")
            }
        }
    }

    func generateSwiftCode(context: MsgContext) -> String? {

        guard let (req_, mod1) = request.generatePartSwiftCode(context: context) else {
            return nil
        }

        let req = req_.components(separatedBy: .newlines).joined(separator: "\n\t")

        guard let (res_, mod2) = response.generatePartSwiftCode(context: context) else {
            return nil
        }

        let res = res_.components(separatedBy: .newlines).joined(separator: "\n\t")


        let importModules = mod1.union(mod2).union(["StdMsgs"]).sorted().map{"import \($0)"}.joined(separator: "\n")

        let swiftMessageType = full_name.replacingOccurrences(of: "/", with: ".")
        let path = swiftMessageType.components(separatedBy: ".")

        var md5sum = compute_md5(msg_context: context)
        if (md5sum == nil) {
            print("Could not compute md5 for \(full_name)")
//            return nil
            md5sum = ""
        }

        let code = """
            // Generated by msgbuilder \(Date())

            \(importModules)

            \(context.embed ? "extension \(path.dropLast().joined(separator: ".")) {" : "")
            \tpublic enum \(path.last!): ServiceProt {
            \t\tpublic static let md5sum: String = "\(md5sum ?? "")"
            \t\tpublic static let datatype = "\(full_name)"

            \t\(req)

            \t\(res)

            \t}
            \(context.embed ? "}" : "")
            """

        return code
    }
}

