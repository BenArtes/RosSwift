//
//  File.swift
//  
//
//  Created by Thomas Gustafsson on 2020-05-09.
//

import Foundation

struct SrvSpec: BaseMsg {
    let request: MsgSpec
    let response: MsgSpec
    let text: String
    let full_name: String
    let package: String
    let short_name: String
    var variables: [Variable] {
        request.variables + response.variables
    }

    let constants: [Constant] = []

    func compute_md5(msg_context: MsgContext) -> String? {
        if let str1 = request.compute_md5_text(msg_context: msg_context), let str2 = response.compute_md5_text(msg_context: msg_context) {
            return (str1+str2).hashed()
        }
        return nil
    }


    func dumpSwiftCode(context: MsgContext, destination: String) {
        request.dumpSwiftCode(context: context, destination: destination)
        response.dumpSwiftCode(context: context, destination: destination)

        if let code = generateSwiftCode(context: context) {
            let file = "\(destination)/\(package)/\(short_name)Srv.swift"
            if let oldContent = try? String(contentsOfFile: file, encoding: .utf8) {
                // The date in the first row will always change
                if oldContent.components(separatedBy: .newlines).dropFirst() == code.components(separatedBy: .newlines).dropFirst() {
                    return
                }
            }
            try? code.write(toFile: file, atomically: false, encoding: .utf8)
            print("generated \(full_name)")
        }

    }

    func generateSwiftCode(context: MsgContext) -> String? {

        let swiftMessageType = full_name.replacingOccurrences(of: "/", with: ".")
        let path = swiftMessageType.components(separatedBy: ".")

        guard let md5sum = compute_md5(msg_context: context) else {
            print("Could not compute md5 for \(full_name)")
            return nil
        }


        let modules: Set<String> = [response.package,request.package]
        let importModules = modules.sorted().map { "import \($0)"}.joined(separator: "\n")

        let code = """
            // Generated by msgbuilder \(Date())

            import StdMsgs

            extension \(path.dropLast().joined(separator: ".")) {
            \tpublic struct \(path.last!): ServiceProt {
            \t\tpublic typealias Request = \(request.full_name.replacingOccurrences(of: "/", with: "."))
            \t\tpublic typealias Response = \(response.full_name.replacingOccurrences(of: "/", with: "."))
            \t\tpublic var request: Request
            \t\tpublic var response: Response

            \t\tpublic static let md5sum: String = "\(md5sum)"
            \t\tpublic static let datatype = "\(full_name)"
            \t}
            }
            """

        return code
    }
}

